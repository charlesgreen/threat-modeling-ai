extract_resources_task:
  description: >
    You are given GCP metadata and architecture information from documents and diagrams.
    Your goal is to analyze this combined data and extract a structured list of system components,
    services, data flows, and trust boundaries across the cloud environment.

    Focus on identifying unique services, cloud resources, and infrastructure nodes that
    would be relevant for a threat model. Use knowledge of GCP services to clarify ambiguous items.

    GCP Metadata:
    {gcp_metadata}

    Architecture Summary:
    {architecture_summary}

    Diagram Insights:
    {diagram_insights}

  expected_output: >
    A JSON list of identified components. Each entry should include:
    - component (name or label from metadata or diagram)
    - service_type (e.g. Cloud Run, Pub/Sub, GCS)
    - role (e.g. frontend, backend, message queue, identity provider)
    - notes (if applicable)

    Format:
    [
      {
        "component": "web-api-service",
        "service_type": "Cloud Run",
        "role": "public API handler",
        "notes": "Called by external clients through HTTPS"
      },
      ...
    ]

stride_threat_modeling_task:
  description: >
    You are a cloud security expert specializing in threat modeling using STRIDE, MITRE ATT&CK, and OWASP frameworks.

    Your job is to perform a deep threat analysis of the system components listed below. For each, consider:

    - STRIDE: Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege
    - MITRE ATT&CK techniques if applicable (TXXXX IDs)
    - OWASP Top 10 if the component is user-facing or handles data (e.g., A01: Broken Access Control)
    - Common cloud misconfigurations
    - Intentional misuse, abuse cases, or trust boundary violations

    Include multiple threats per component when appropriate. Be specific in naming the attack, affected asset, impact, and actionable mitigation. 
    If the risk arises due to a design assumption (e.g. "internal services are trusted"), note it.

    Component List:
    {component_list}

  expected_output: >
    A JSON list of threat entries. Each entry should include:
    - threat (short description of the attack or issue)
    - asset (component name, e.g., "Cloud Run: api-handler")
    - category (STRIDE category)
    - likelihood (Low / Medium / High)
    - impact (Minor / Moderate / Severe)
    - mitigation (clear, actionable fix; include OWASP and MITRE references if relevant)

    Format:
    [
      {
        "threat": "Exposed API allows privilege escalation",
        "asset": "Cloud Run: api-handler",
        "category": "Elevation of Privilege",
        "likelihood": "High",
        "impact": "Severe",
        "mitigation": "Enforce RBAC and limit service-to-service tokens. [MITRE: T1068] [OWASP: A01]"
      },
      {
        "threat": "Assumption: Internal services are trusted without auth",
        "asset": "Cloud Function: internal-task-runner",
        "category": "Spoofing",
        "likelihood": "Medium",
        "impact": "Moderate",
        "mitigation": "Apply mutual TLS or signed requests for internal service calls."
      },
      ...
    ]


export_risks_task:
  description: >
    Convert the list of structured threat entries into a CSV string suitable
    for review and execution by a penetration testing team.

    Ensure the output is clean, well-formatted, and retains all key fields
    needed for testers to act on.

    Threat List:
    {threat_list}

  expected_output: >
    A CSV file in string format containing the following headers:
    threat, asset, category, likelihood, impact, mitigation

    The output should be raw CSV text ready to be saved to a file or sent downstream.
